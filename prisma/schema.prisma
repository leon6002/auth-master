// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}


// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN

}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole        @default(USER)
  accounts      Account[]
  File          File[]
  Message       Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}




model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.VarChar(512)
  access_token      String?  @db.VarChar(255)
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id])
 
  @@id([provider, providerAccountId])

  @@map("account")
}


enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url      String
  key      String
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("file")
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  isUserMessage Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  File      File?    @relation(fields: [fileId], references: [id])
  fileId    String?

  @@map("message")
}


enum ChatRole {
  USER      @map("user")
  ASSISTANT @map("assistant")
  TOOL      @map("tool")

  @@map("chat_role_enum")
}

model chat {
  id        String    @id
  userId    String?
  title     String
  path      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  sharePath String?
}

model ChatMessages {
  id        Int               @id @default(autoincrement())
  messageId String
  role      ChatRole @default(USER)
  type      ChatContentType @default(TEXT)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  chatId    String
  deleted   Boolean           @default(false)
  deletedAt DateTime?

  @@map("chat_messages")
}


enum ChatContentType {
  TEXT
  JSON
  TOOLCALL
  TOOLRESULT
  FILE
  IMAGE
  AUDIO

  @@map("chat_content_type_enum")
}

model ToolCallContent {
  id        String   @id
  name      String
  args      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String

  @@map("tool_call_content")
}

model ToolResultContent {
  id        String   @id
  name      String
  args      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String

  @@map("tool_result_content")
}


model TextContent {
  id        String   @id
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("text_content")
}

model JsonContent {
  id        String   @id
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  messageId String

  @@map("json_content")
}



